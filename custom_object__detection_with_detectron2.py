# -*- coding: utf-8 -*-
"""custom_object _detection_with_detectron2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Z_8cg-imlE7wWr6l37bLbwGFm-nBktdM
"""

!python -m pip install pyyaml==5.1
import sys, os, distutils.core

# Note: This is a faster way to install detectron2 in Colab,
# but it does not include all functionalities (e.g., compilation).
# See https://detectron2.readthedocs.io/tutorials/install.html for full instructions.

!git clone 'https://github.com/facebookresearch/detectron2'
dist = distutils.core.run_setup("./detectron2/setup.py")
!python -m pip install {' '.join("'%s'" % x for x in dist.install_requires)}
sys.path.insert(0, os.path.abspath('./detectron2'))

import detectron2
from detectron2.utils.logger import setup_logger
setup_logger()
import numpy as np
import os,json,cv2,random
from google.colab.patches import cv2_imshow
from detectron2 import model_zoo
from detectron2.engine import DefaultPredictor
from detectron2.utils.visualizer import Visualizer # Corrected import
from detectron2.data import MetadataCatalog, DatasetCatalog # Corrected import

!pip install 'git+https://github.com/facebookresearch/detectron2.git'

import torch,detectron2
!nvcc --version
TORCH_VERSION = ".".join(torch.__version__.split(".")[:2])
CUDA_VERSION = torch.__version__.split("+")[-1]
print("torch: ", TORCH_VERSION, "; cuda: ", CUDA_VERSION)
print("detectron2:",detectron2.__version__)

!pip install roboflow

from roboflow import Roboflow
rf = Roboflow(api_key="LGJUIGJIhJ72Z400eCUQ")
project = rf.workspace("joseph-nelson").project("hard-hat-workers")
version = project.version(14)
dataset = version.download("coco")

from detectron2.data.datasets import register_coco_instances

register_coco_instances("hardhat_train", {}, "Hard-Hat-Workers-14/train/_annotations.coco.json", "Hard-Hat-Workers-14/train")
register_coco_instances("hardhat_val", {}, "Hard-Hat-Workers-14/valid/_annotations.coco.json", "Hard-Hat-Workers-14/valid")
register_coco_instances("hardhat_test", {}, "Hard-Hat-Workers-14/test/_annotations.coco.json", "Hard-Hat-Workers-14/test")

hardhat_metadata = MetadataCatalog.get("hardhat_train")
dataset_dicts = DatasetCatalog.get("hardhat_train")
d = random.choice(dataset_dicts)
img = cv2.imread(d["file_name"])
#img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)
visualizer = Visualizer(img[:, :, ::-1], metadata=hardhat_metadata, scale=0.5)
out = visualizer.draw_dataset_dict(d)
cv2_imshow(out.get_image()[:, :, ::-1])

print(hardhat_metadata)
print(dataset_dicts[0])

import torch
print(torch.cuda.is_available())

#training
from detectron2.engine import DefaultTrainer
from detectron2.config import get_cfg
cfg = get_cfg()
cfg.merge_from_file(model_zoo.get_config_file("COCO-Detection/faster_rcnn_R_50_FPN_3x.yaml"))
cfg.DATASETS.TRAIN = ("hardhat_train",)
cfg.DATASETS.TEST = ("hardhat_val",) # Added this line to specify the validation dataset
cfg.DATALOADER.NUM_WORKERS = 2
cfg.MODEL.WEIGHTS = model_zoo.get_checkpoint_url("COCO-Detection/faster_rcnn_R_50_FPN_3x.yaml")
cfg.SOLVER.IMS_PER_BATCH =2
cfg.SOLVER.BASE_LR =  0.0025
cfg.SOLVER.MAX_ITER = 300
cfg.MODEL.ROI_HEADS.BATCH_SIZE_PER_IMAGE = 128
cfg.MODEL.ROI_HEADS.NUM_CLASSES = 2 # Corrected to 2 classes
os.makedirs(cfg.OUTPUT_DIR, exist_ok=True)
trainer = DefaultTrainer(cfg)
trainer.resume_or_load(resume=False)
trainer.train()

from detectron2.evaluation import COCOEvaluator,inference_on_dataset
from detectron2.data import build_detection_test_loader
evaluator = COCOEvaluator("hardhat_val",output_dir="./output")
val_loader = build_detection_test_loader(cfg,"hardhat_val")
print(inference_on_dataset(trainer.model,val_loader,evaluator))

#getting congif  file for model config   in the future
f = open('config.yaml','w')
f.write(cfg.dump())
f.close()

from detectron2.data import MetadataCatalog

custom_metadata = Metadata(name="hardhat_custom",
                           thing_classes=["Helmet", "No Helmet"],
                           thing_colors=[(0, 255, 0), (255, 0, 0)]) # Green, Red

import cv2
from detectron2.utils.visualizer import Visualizer
from detectron2.utils.visualizer import ColorMode
from detectron2.engine import DefaultPredictor
from detectron2.config import get_cfg
cfg = get_cfg()
cfg.merge_from_file("config.yaml")
cfg.MODEL.WEIGHTS = "/content/output/model_final.pth"
cfg.MODEL.ROI_HEADS.SCORE_THRESH_TEST = 0.8  # set threshold for this model

predictor = DefaultPredictor(cfg)
def predict_from_image(img):
  outputs = predictor(img)
  v = Visualizer(img[:,:,::-1],
                 metadata =custom_metadata,
                 scale =1.2,
                 instance_mode= ColorMode.SEGMENTATION)

  out = v.draw_instance_predictions(outputs["instances"].to("cpu"))
  return outputs,out.get_image()[:,:,::-1]

#read a image
img = cv2.imread("/content/WIN_20240915_18_12_39_Pro.jpg")
#get predictions
outputs,vis_img = predict_from_image(img)
#show Predictions
cv2_imshow(vis_img)
#cv2.waitKey(0)
#cv2.destroyAllWindows()
print(outputs["instances"].pred_classes) # pred_classes
print(outputs["instances"].pred_boxes) # pred_boxes
print(outputs["instances"].scores)  #confidence score

